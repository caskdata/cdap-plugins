projectId=cdf-athena
dataset=test_automation
csvFormat=csv

## GCS-PLUGIN-PROPERTIES
gcsSourceBucket1=dummy
gcsSourceBucket2=dummy
gcsTargetBucket=dummy

firstNameCsvFile=testdata/first_name.csv
lastNameCsvFile=testdata/last_name.csv
firstNameOutputSchema=[{"key":"id","value":"int"},{"key":"first_name","value":"string"}]
lastNameOutputSchema=[{"key":"id","value":"int"},{"key":"last_name","value":"string"}]
errorCollectorOutputSchema=[{"key":"id","value":"int"},{"key":"first_name","value":"string"},\
  {"key":"msg","value":"string"},{"key":"code","value":"int"},{"key":"node","value":"string"}]
joinerOutput=testdata/joiner_output.csv
errorCollectorOutput=testdata/error_collector_output.csv
expectedJoinerOutputPartitions=1
# Set the errorcollector partition to 0 since the plugin doesn't specify the output partition.
# By setting it to 0, all partitions will be combined and sorted during the verification process.
expectedErrorCollectorOutputPartitions=0
javascriptTransformScript=function transform(input, emitter, context) { \
                    if (input.id < 10) { \
                        emitter.emitError({ \
                            'errorCode': 1, \
                            'errorMsg': 'blacklisted id', \
                            'invalidRecord': input \
                        }); \
                        return \
                    } \
                }

## FILE-PLUGIN-PROPERTIES-START
incorrectFilePath=invalidPath
csvFile=testdata/file/CSV_TEST.csv
csvFileSchema=[{"key":"EmployeeDepartment","value":"string"},{"key":"Employeename","value":"string"},\
  {"key":"Salary","value":"int"},{"key":"workhours","value":"int"}]
csvFileOutputSchema={ "type": "record", "name": "text", "fields": [ \
  { "name": "EmployeeDepartment", "type": "string" }, { "name": "Employeename", "type": "string" }, \
  { "name": "Salary", "type": "int" }, { "name": "workhours", "type": "int" } ] }
csvNoHeaderFile=testdata/file/CSV_NO_HEADER_TEST.csv
csvNoHeaderFileSchema=[{"key":"body_0","value":"string"},{"key":"body_1","value":"string"},\
  {"key":"body_2","value":"int"},{"key":"body_3","value":"int"}]
csvAllDataTypeFile=testdata/file/CSV_DATATYPE_TEST_1.csv
csvAllDataTypeFileSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"isdeleted","value":"boolean"},{"key":"email","value":"string"},\
  {"key":"createddate","value":"datetime"},{"key":"revenue","value":"double"},{"key":"points","value":"decimal"},\
  {"key":"longdatatype","value":"long"},{"key":"doubledatatype","value":"double"},\
  {"key":"BytesData","value":"bytes"}]
tsvFile=testdata/file/TSV_TEST.tsv
tsvFileSchema=[{"key":"testscenarioid","value":"string"},{"key":"testdescription","value":"string"},\
  {"key":"testconditionid","value":"string"},{"key":"testtype","value":"string"}]
blobFile=testdata/file/BLOB_TEST.zip
blobFileSchema=[{"key":"body","value":"bytes"}]
delimitedFile=testdata/file/DELIMITED_TEST.txt
delimiter=@
incorrectDelimiter=#
delimitedFileSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"datatype","value":"long"},{"key":"tablename","value":"string"}]
textFile=testdata/file/TEXT_TEST.txt
textFileSchema=[{"key":"offset","value":"long"},{"key":"body","value":"string"}]
outputFieldTestFile=testdata/file/OUTPUTFIELD_TEST.csv
outputPathField=outputfield
invalidOutputPathField=invalid
outputFieldTestFileSchema=[{"key":"id","value":"int"},{"key":"firstname","value":"string"},\
  {"key":"lastname","value":"string"},{"key":"photo","value":"string"},{"key":"outputfield","value":"string"}]
overrideSchema=[{"key":"id","value":"float"},{"key":"firstname","value":"string"},\
  {"key":"lastname","value":"string"},{"key":"photo","value":"string"},{"key":"outputfield","value":"string"}]
overrideField=id
invalidOverrideField=invalid
overrideDataType=float
readRecursivePath=testdata/file/RECURSIVE_TEST
readRecursivePathSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"tablename","value":"string"},{"key":"offset","value":"string"}]
fileMaxSplitSize=1
regexPathFilter=.+TEST.csv
incorrectRegexPathFilter=/tZY
filePluginOutputFolder=file-plugin-output
skipHeaderTrue=true
fileSinkPathSuffix=yyyy-MM-dd-HH-mm-ss
fileSourceOverrideSchema=[{"key":"createddate","value":"datetime"},{"key":"revenue","value":"double"},\
  {"key":"points","value":"decimal"},{"key":"BytesData","value":"bytes"}]
csvAllDataTypeOutputFile=testdata/file/expected_outputs/CSV_DATATYPE_TEST_1_OUTPUT.csv
outputForAllDataTypeTest=testdata/file/expected_outputs/OUTPUT_FOR_ALL_DATATYPE_TEST.csv
outputForTsvInputTest=testdata/file/expected_outputs/OUTPUT_FOR_TSV.csv
outputForTextInputTest=testdata/file/expected_outputs/OUTPUT_FOR_TEXT_FILE.csv
outputForOutputFieldTest=testdata/file/expected_outputs/OUTPUT_FOR_OUTPUTFIELD_TEST.csv
outputForOverrideTest=testdata/file/expected_outputs/OUTPUT_FOR_OVERRIDE_TEST.csv
outputForDelimitedTest=testdata/file/expected_outputs/OUTPUT_FOR_DELIMITED_TEST.csv
outputForRegexTest=testdata/file/expected_outputs/OUTPUT_FOR_REGEX_TEST.csv
outputForRecursiveTest=testdata/file/expected_outputs/OUTPUT_FOR_RECURSIVE_TEST.csv
outputForCSVInputTest=testdata/file/expected_outputs/OUTPUT_FOR_CSV_TEST.csv
outputForCSVDelimitedOutputTest=testdata/file/expected_outputs/OUTPUT_FOR_CSV_DELIMITED_TEST.csv
tsvFormatOutput=testdata/file/expected_outputs/TSV_OUTPUT.tsv
jsonFormatOutput=testdata/file/expected_outputs/JSON_OUTPUT.json
orcFormatOutput=testdata/file/expected_outputs/ORC_OUTPUT.orc
## FILE-PLUGIN-PROPERTIES-END
